import React from "react"
import { useEffect, useRef, useState } from "react"
import gsap from "gsap"

// Define props interface
interface OrionAnimationProps {
  onAnimationComplete?: () => void
}

// Define custom SVG circle props to handle non-standard attributes
interface CustomCircleProps extends React.SVGProps<SVGCircleElement> {
  x0?: string | number
  y0?: string | number
  start?: string | number
  trail?: string | boolean
}

const OrionAnimation: React.FC<OrionAnimationProps> = ({ onAnimationComplete }) => {
  const svgRef = useRef<SVGSVGElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const [isMounted, setIsMounted] = useState(false)
  console.log("orionAnimation mounted! hehe")

  // Initial mounting effect
  useEffect(() => {
    // Set initial state - make sure container is visible with black background first
    if (containerRef.current) {
      containerRef.current.style.opacity = "1"
      containerRef.current.style.background = "#000"
    }
    
    // Hide SVG initially to prevent flash
    if (svgRef.current) {
      svgRef.current.style.opacity = "0"
    }

    // Set a small delay to ensure DOM is fully rendered
    const timer = setTimeout(() => {
      setIsMounted(true)
    }, 300) // Slightly longer delay to ensure black screen is visible first

    return () => clearTimeout(timer)
  }, [])

  // Main animation effect
  useEffect(() => {
    if (!isMounted || !svgRef.current) return

    console.log("ðŸ”µ OrionAnimation: Starting GSAP animations...")
    const svg = svgRef.current

    // Set initial state - completely hidden SVG
    gsap.set(svg, { opacity: 0 })

    const tl = gsap.timeline({
      onComplete: () => {
        console.log("âœ… OrionAnimation: GSAP finished all animations")

        // Fade out the container instead of instantly removing it
        if (containerRef.current) {
          gsap.to(containerRef.current, {
            opacity: 0,
            // IMPORTANT
            // this determined when to transition into the pinpage
            duration: 0.1,
            onComplete: () => {
              // After fading out, hide it completely
              if (containerRef.current) {
                containerRef.current.style.display = "none"
              }
              if (onAnimationComplete) onAnimationComplete()
            },
          })
        } else {
          if (onAnimationComplete) onAnimationComplete()
        }
      },
    })

    // Helper function for getting SVG element lengths safely
    const getElementLength = (element: SVGGeometryElement): number => {
      try {
        if (element && typeof element.getTotalLength === "function") {
          // Add a check to make sure the element is properly rendered
          const box = element.getBBox()
          if (box.width === 0 && box.height === 0) {
            console.warn("Element has zero dimensions, using fallback length")
            return 100 // Fallback length
          }
          return element.getTotalLength()
        }
      } catch (error) {
        console.warn("Error getting element length:", error)
      }
      return 100 // Fallback length if everything fails
    }

    // Make sure the animation is visible after a delay but not immediately
    tl.to(svg, { 
      opacity: 1, 
      duration: 0.8,
      delay: 0.2, // Add delay to make sure black background is seen first
      ease: "power1.inOut",
      onComplete: () => console.log("âœ… OrionAnimation: SVG now visible") 
    })

    // Time stamps
    const T_SHOOTING_STAR = 1.88 + 0.32
    tl.add("shooting-star", T_SHOOTING_STAR)

    // Scene animation
    tl.from(".Scene", {
      scale: 1.12,
      duration: 2,
      ease: "linear",
      svgOrigin: "1280 800",
    })

    tl.to(
      ".Scene",
      {
        scale: 0.8,
        duration: 2.5,
        ease: "power2.out",
        svgOrigin: "1280 800",
      },
      "shooting-star",
    )

    // Grid animations
    const tlOutlines = gsap.timeline({
      defaults: {
        strokeDashoffset: 674.43 * 2,
        duration: 1,
        ease: "power2.inOut",
      },
    })

    tl.set(
      "#Grid > line",
      {
        strokeDasharray: 674.43,
        strokeDashoffset: 674.43,
      },
      0,
    )

    // Animate grid lines
    tlOutlines.to(
      "#Grid > line:nth-child(1)",
      {
        strokeDashoffset: 674.43 * 2,
      },
      0.92,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(2)",
      {
        strokeDashoffset: 674.43 * 2,
      },
      1.72,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(4)",
      {
        strokeDashoffset: 674.43 * 2,
      },
      1,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(3)",
      {
        strokeDashoffset: 674.43 * 2,
      },
      1.8,
    )

    // Make the grid shrink
    tlOutlines.to(
      "#Grid > line:nth-child(1)",
      {
        scaleY: 0,
        duration: 1.2,
        ease: "power2.in",
      },
      4,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(2)",
      {
        scaleY: 0,
        duration: 1.2,
        ease: "power2.in",
      },
      4,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(4)",
      {
        scaleX: 0,
        duration: 1.2,
        ease: "power2.in",
      },
      4,
    )
    tlOutlines.to(
      "#Grid > line:nth-child(3)",
      {
        scaleX: 0,
        duration: 1.2,
        ease: "power2.in",
      },
      4,
    )

    // Inner grid animations
    const tlInside = gsap.timeline({
      defaults: {
        stagger: -0.1,
        duration: 1,
        ease: "power1.out",
      },
    })

    tl.set(
      "#Inner line:nth-child(-n+5)",
      {
        x: -572.71,
      },
      0,
    )
    tl.set(
      "#Inner line:nth-child(n+6)",
      {
        y: 572.71,
      },
      0,
    )

    tlInside.to(
      "#Inner line:nth-child(-n+5)",
      {
        x: 0,
      },
      1.04,
    )
    tlInside.to(
      "#Inner line:nth-child(n+6)",
      {
        y: 0,
      },
      1.08,
    )

    tlInside.to(
      "#Inner line:nth-child(-n+5)",
      {
        scaleX: 0,
      },
      4,
    )
    tlInside.to(
      "#Inner line:nth-child(n+6)",
      {
        scaleY: 0,
      },
      4,
    )

    // Particle animations
    const tlParticles = gsap.timeline()
    const elParticles = svg.querySelectorAll("#Particles circle")

    elParticles.forEach((p) => {
      const particle = p as SVGCircleElement
      let start = Number.parseFloat(particle.getAttribute("start") || "0")
      const x0 = Number.parseFloat(particle.getAttribute("x0") || "0")
      const y0 = Number.parseFloat(particle.getAttribute("y0") || "0")
      const simpleFade = x0 === 0 && y0 === 0 ? true : false

      if (simpleFade) {
        start = Math.random() * 1.3 + 0.2
      }

      tlParticles.from(
        particle,
        {
          opacity: 0,
          duration: 0.3,
          ease: simpleFade ? "power2.out" : "power2.inOut",
        },
        start,
      )

      if (!simpleFade) {
        tlParticles.from(
          particle,
          {
            x: x0 * 96.7,
            y: y0 * 96.7,
            duration: simpleFade ? 0.3 : 1,
            ease: simpleFade ? "power2.out" : "power2.inOut",
          },
          start + 0.1,
        )
      }

      // Create a trail for the particle
      if (!simpleFade) {
        const trail = document.createElementNS("http://www.w3.org/2000/svg", "line")
        trail.setAttribute("stroke", "white")

        if (particle.getAttribute("trail")) {
          trail.setAttribute("stroke", "#8B0000") 
          // color of 2 of the trails
          
        }

        const cx = Number.parseFloat(particle.getAttribute("cx") || "0")
        const cy = Number.parseFloat(particle.getAttribute("cy") || "0")

        trail.setAttribute("x1", cx.toString())
        trail.setAttribute("y1", cy.toString())
        trail.setAttribute("x2", (cx + x0 * 96.7).toString())
        trail.setAttribute("y2", (cy + y0 * 96.7).toString())

        svg.appendChild(trail)
        try {
          const length = trail.getTotalLength()

          trail.setAttribute("stroke-dasharray", `${length * 0.5} ${length}`)
          trail.setAttribute("stroke-dashoffset", (length * 0.5).toString())

          tlParticles.to(
            trail,
            {
              strokeDashoffset: length * 0.5 + length,
              duration: 1,
              ease: "power2.inOut",
            },
            start + 0.1,
          )

          tlParticles.to(
            trail,
            {
              strokeDashoffset: length * 0.5 * 2 + length,
              duration: 0.8,
              ease: "power1.inOut",
            },
            start + 0.9,
          )
        } catch (error) {
          console.warn("Error animating trail:", error)
        }
      }

      // Explosion animation
      const x = gsap.utils.random(300, 1500) * (Math.random() > 0.5 ? 1 : -1)
      const y = gsap.utils.random(300, 1500) * (Math.random() > 0.5 ? 1 : -1)

      tlParticles.to(
        particle,
        {
          x,
          y,
          duration: Math.random() * 2 + 2,
          ease: "expo.out",
        },
        2.2,
      )
    })

    // Shooting star animation
    tl.from(
      "#ShootingStar",
      {
        x: 1100,
        y: -1100,
        duration: 0.32,
        ease: "none",
      },
      1.88,
    )

    tl.from(
      "#ShootingStarTrail1",
      {
        x: 50,
        y: -50,
        duration: 0.32,
        ease: "none",
      },
      1.88,
    )

    tl.from(
      "#ShootingStarTrail2",
      {
        attr: {
          x2: 1516.79 + 500,
          y2: 955.83 - 500,
        },
        duration: 0.32,
        ease: "none",
      },
      1.88,
    )

    tl.to(
      "#ShootingStar",
      {
        scale: 0,
        duration: 0.02,
        ease: "none",
      },
      "shooting-star",
    )

    tl.from(
      "#Blink",
      {
        scale: 0,
        duration: 0.08,
        ease: "power2.out",
      },
      "shooting-star",
    )

    tl.to(
      "#Blink",
      {
        scale: 0,
        duration: 0.08,
        ease: "power2.in",
      },
      "shooting-star+=0.08",
    )

    // Logo animations - Hexagon Logo
    if (document.getElementById("hexLogo")) {
      const hexLogo = svg.querySelector('#hexLogo');

      // Initial scale and fade in
      tl.from(hexLogo, {
        opacity: 0,
        scale: 0,
        transformOrigin: 'center center',
        duration: 1,
        ease: 'back.out(1.7)',
      }, 'shooting-star+=0.5');

      // Rotation animation
      tl.to(hexLogo, {
        rotation: 360,
        transformOrigin: 'center center',
        duration: 2.5,
        ease: 'power2.inOut'
      }, 'shooting-star+=1.5');

      // Glow effect
      tl.to(hexLogo, {
        filter: 'drop-shadow(0 0 15px rgba(255,80,78,0.8))',
        duration: 0.5,
      }, 'shooting-star+=2');

      // Single pulse animation (not repeating)
      tl.to(hexLogo, {
        scale: 1.05,
        duration: 0.75,
        ease: 'power1.inOut'
      }, 'shooting-star+=3');
      
      tl.to(hexLogo, {
        scale: 1,
        duration: 0.75,
        ease: 'power1.inOut'
      }, 'shooting-star+=3.75');
      
      // Final glow burst before ending
      tl.to(hexLogo, {
        filter: 'drop-shadow(0 0 25px rgba(255,80,78,0.9))',
        duration: 0.3,
      }, 'shooting-star+=4.5');
      
      tl.to(hexLogo, {
        filter: 'drop-shadow(0 0 15px rgba(255,80,78,0.8))',
        duration: 0.5,
      }, 'shooting-star+=4.8');
    }

    // Set a final delay before ending the animation
    tl.to({}, { duration: 1 }, 'shooting-star+=5.5');

    // Add all timelines to the main one
    tl.add(tlOutlines, 0)
    tl.add(tlInside, 0)
    tl.add(tlParticles, 0)

    // Cleanup function
    return () => tl.kill()
  }, [isMounted, onAnimationComplete])

  return (
    <div
      ref={containerRef}
      className="orion-container"
      style={{
        position: "fixed",
        top: "0",
        left: "0",
        width: "100vw",
        height: "100vh",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        zIndex: 1000,
        background: "#000",
        margin: 0,
        padding: 0,
        overflow: "hidden",
        opacity: 1,
        transition: "opacity 0.5s ease-in-out",
      }}
    >
      <svg ref={svgRef} className="space" viewBox="0 0 2560 1600" style={{ width: "100%", height: "100%" }}>
        <defs>
          <clipPath id="innerClip">
            <rect x="993.16" y="514.63" width="572.71" height="572.71" />
          </clipPath>
          <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
            <feGaussianBlur stdDeviation="10" result="blur" />
            <feComposite in="SourceGraphic" in2="blur" operator="over" />
          </filter>
          <filter id="enhancedGlow" x="-50%" y="-50%" width="200%" height="200%">
            <feGaussianBlur stdDeviation="15" result="blur" />
            <feFlood floodColor="#ff3333" floodOpacity="0.7" result="glowColor" />
            <feComposite in="glowColor" in2="blur" operator="in" result="softGlow" />
            <feComposite in="softGlow" in2="SourceGraphic" operator="over" />
          </filter>
          <filter id="pulsatingGlow" x="-50%" y="-50%" width="200%" height="200%">
            <feGaussianBlur stdDeviation="20" result="blur" />
            <feComposite in="SourceGraphic" in2="blur" operator="over" />
          </filter>
          <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ff3333" />
            <stop offset="100%" stopColor="#ff5555" />
          </linearGradient>
        </defs>

        <g className="Scene">
          {/* Place your CodeWithAli path here - this comment indicates where to put your logo/path */}
          
          <g id="hexLogo" transform="translate(1182, 700) scale(0.4)" style={{ transformOrigin: 'center' }}>
            {/* This is where your path should go - remove this comment and paste your path data here */}
            <path d="M0 0 C1.20743688 0.71746249 2.39764791 1.46528612 3.5625 2.25 C4.92375 3.1471875 4.92375 3.1471875 6.3125 4.0625 C10.96385958 8.58465515 12.54121491 12.30515171 13.08203125 18.60546875 C13.65671177 21.88008903 14.0407915 23.70863641 16.36401367 26.11938477 C18.85907621 27.7752304 21.38837954 29.15206936 24.0625 30.5 C26.06539601 31.59321548 28.06798733 32.68698932 30.0703125 33.78125 C31.12766602 34.34199219 32.18501953 34.90273437 33.27441406 35.48046875 C38.90951483 38.51308015 44.4109486 41.77523709 49.9375 45 C57.47739646 49.35280567 65.04191851 53.65690934 72.64550781 57.8972168 C79.34767155 61.65510279 85.94485301 65.59039308 92.55151367 69.51293945 C97.71663367 72.57737588 102.8968698 75.60691571 108.125 78.5625 C112.60235793 81.10109768 117.00107834 83.72647482 121.375 86.4375 C123.43735267 87.70857241 125.49984148 88.97942398 127.5625 90.25 C128.43261719 90.79398437 129.30273438 91.33796875 130.19921875 91.8984375 C130.97910156 92.36507812 131.75898438 92.83171875 132.5625 93.3125 C133.2225 93.71597656 133.8825 94.11945313 134.5625 94.53515625 C137.23155782 95.4891359 138.8347891 94.92472788 141.5625 94.25 C146.85225567 93.78031282 151.1693587 93.56609427 156 95.9375 C159.65249787 99.23365661 163.29433207 102.55952833 163.80078125 107.640625 C163.95865963 113.72309728 163.81953612 117.51995987 159.5625 122.25 C158.86698627 122.67784601 158.17147253 123.10569202 157.45488262 123.54650307 C155.31796332 125.12791304 155.31796332 125.12791304 155.0507555 127.83846092 C155.04535094 128.88373262 155.03994638 129.92900433 155.03437805 131.00595093 C155.01876328 132.20607315 155.0031485 133.40619537 154.98706055 134.64268494 C154.99044434 135.96119949 154.99382812 137.27971405 154.99731445 138.63818359 C154.98698395 140.03937545 154.97499571 141.44055592 154.96147156 142.84172058 C154.9303803 146.64969726 154.92514838 150.45729583 154.92640328 154.2653842 C154.92557363 157.44383416 154.91333662 160.62220173 154.90145367 163.8006264 C154.87406129 171.29975382 154.86875594 178.79868468 154.8762207 186.29785156 C154.88346116 194.03428345 154.85005464 201.76980393 154.79716331 209.50603807 C154.75339631 216.14736153 154.73666541 222.78839042 154.7411992 229.42985594 C154.7435227 233.39687173 154.73517778 237.36315149 154.70012856 241.33002853 C154.6681897 245.06182718 154.66996551 248.79211682 154.69757271 252.52393532 C154.70415592 254.54476877 154.67615236 256.56562225 154.64712524 258.58625793 C154.50028959 264.78371428 154.50028959 264.78371428 157.10803795 270.12485123 C159.1870461 271.68545661 159.1870461 271.68545661 162.5625 273.25 C168.12065581 279.13446633 169.3728021 285.61197733 169.20507812 293.4831543 C168.71639176 301.36698112 165.70402257 305.41791227 160.125 310.625 C153.87896678 315.54692767 147.30953035 316.03936263 139.5625 315.25 C137.47265625 314.5390625 137.47265625 314.5390625 135.6875 313.6875 C132.11164002 312.04260441 131.23335711 312.19985257 127.5625 313.25 C125.21856539 314.318931 125.21856539 314.318931 122.88671875 315.69921875 C121.98880615 316.21033203 121.09089355 316.72144531 120.16577148 317.24804688 C119.20356689 317.80556641 118.2413623 318.36308594 117.25 318.9375 C116.2381665 319.51693359 115.22633301 320.09636719 114.18383789 320.69335938 C110.97166427 322.53694951 107.76626281 324.39183702 104.5625 326.25 C103.54994141 326.83604004 102.53738281 327.42208008 101.49414062 328.02587891 C92.48604937 333.24455085 83.50206976 338.50355718 74.546875 343.8125 C73.57242432 344.39 72.59797363 344.9675 71.59399414 345.5625 C69.77165646 346.64379436 67.95042553 347.72695746 66.13061523 348.8125 C60.94679555 351.8918182 55.70166519 354.82237477 50.39916992 357.69189453 C45.41869323 360.42753462 40.52547584 363.31175272 35.625 366.1875 C29.59765625 369.71484375 29.59765625 369.71484375 26.61767578 371.45654297 C24.4761846 372.71364655 22.33953198 373.97901207 20.20654297 375.25048828 C19.12646973 375.89099121 18.04639648 376.53149414 16.93359375 377.19140625 C15.95189209 377.77736572 14.97019043 378.3633252 13.95874023 378.96704102 C11.5625 380.25 11.5625 380.25 9.5625 380.25 C9.48 381.425625 9.3975 382.60125 9.3125 383.8125 C8.51742317 389.89376329 6.16030931 394.25012077 1.375 398.125 C-3.89209929 401.53510916 -9.57205183 401.81479706 -15.625 400.625 C-20.68974027 399.12172052 -23.95409157 396.2278779 -27.125 392 C-28.4375 389.25 -28.4375 389.25 -28.77368164 387.27636719 C-29.59933775 383.17637175 -30.63265409 380.88357073 -33.96948242 378.25683594 C-37.31385113 376.28573611 -40.72049628 374.49082785 -44.1875 372.75 C-45.42770702 372.10012295 -46.66623158 371.44702531 -47.90307617 370.79077148 C-50.32598601 369.50659511 -52.75419346 368.23355355 -55.18701172 366.96826172 C-59.13011718 364.88387113 -62.95520882 362.65332009 -66.75 360.3125 C-71.75941044 357.2550805 -76.81302901 354.29169571 -81.91625977 351.39306641 C-86.6875786 348.68219443 -91.44028633 345.94035463 -96.1875 343.1875 C-101.81455651 339.92451796 -107.44512952 336.66782785 -113.08203125 333.421875 C-114.23925967 332.75529294 -115.39648623 332.08870764 -116.55371094 331.42211914 C-118.79483221 330.1315216 -121.03634748 328.84160792 -123.27832031 327.55249023 C-140.79229461 317.46397602 -140.79229461 317.46397602 -144.28173828 314.88916016 C-146.82017602 313.11391285 -148.65147533 312.11789501 -151.76171875 312.640625 C-154.05763292 313.39483835 -156.22991584 314.27027757 -158.4375 315.25 C-165.05289631 317.4551321 -171.29675089 316.22541452 -177.4375 313.25 C-183.06927896 309.48884726 -187.66211292 304.91045838 -189.4375 298.25 C-190.46148928 290.64322249 -189.74930123 284.42807536 -186.3125 277.56640625 C-184.4375 275.25 -184.4375 275.25 -182.53967094 274.1971674 C-180.02720388 272.76637708 -178.31383184 271.46284955 -176.4375 269.25 C-175.22528897 264.66101611 -175.3647337 260.1531486 -175.43408203 255.42944336 C-175.42650981 254.01794787 -175.41550485 252.60646727 -175.40133667 251.19502258 C-175.37346652 247.37221508 -175.39573189 243.55121173 -175.4287591 239.7285049 C-175.45650814 235.72430891 -175.44353479 231.72021513 -175.43649292 227.71595764 C-175.4310929 220.99320469 -175.45800366 214.27116677 -175.50439453 207.54858398 C-175.55763489 199.77972294 -175.56110088 192.01205633 -175.5376178 184.24307531 C-175.51605016 176.76354966 -175.52844382 169.28445548 -175.55672836 161.80496407 C-175.56823592 158.62436264 -175.56809273 155.4440776 -175.55859756 152.2634716 C-175.54904312 148.5176583 -175.56931593 144.77315088 -175.61250687 141.02758598 C-175.62892034 138.99974684 -175.61595258 136.9717365 -175.60211182 134.94387817 C-175.47538945 128.84210926 -175.47538945 128.84210926 -177.75875473 123.41024971 C-179.53177155 121.89367487 -179.53177155 121.89367487 -182.4375 120.25 C-185.43244402 115.32283403 -185.91561898 111.27940056 -185.1484375 105.6875 C-183.76900938 100.95803217 -180.69017957 97.67448855 -176.578125 95.07421875 C-173.93462204 94.05637363 -171.82745278 94.01936272 -169 94.0625 C-168.07316406 94.06894531 -167.14632812 94.07539063 -166.19140625 94.08203125 C-163.4375 94.25 -163.4375 94.25 -160.96484375 94.9453125 C-157.35831768 95.38010235 -155.5641015 94.0985711 -152.4375 92.3125 C-151.29539063 91.66539062 -150.15328125 91.01828125 -148.9765625 90.3515625 C-144.5701308 87.7571214 -140.21695541 85.0779925 -135.8984375 82.33984375 C-132.14989526 80.02211312 -128.27031634 77.95151606 -124.39550781 75.85424805 C-109.175798 67.59997987 -94.17138869 58.98081331 -79.29296875 50.12890625 C-75.40432202 47.81663696 -71.49609419 45.54738886 -67.5625 43.3125 C-66.50546875 42.69632813 -65.4484375 42.08015625 -64.359375 41.4453125 C-61.09335675 39.57262843 -57.74856419 37.88127641 -54.390625 36.1796875 C-42.42497878 30.73791358 -42.42497878 30.73791358 -34.18359375 21.22265625 C-33.14491627 17.62848157 -32.83760099 13.96329686 -32.4375 10.25 C-29.91118311 4.96144558 -24.47676731 1.89614246 -19.4375 -0.75 C-13.25996439 -2.80917854 -5.91783996 -2.87986487 0 0 Z M-22.4375 16.25 C-23.64393566 19.86930698 -23.76018559 22.44231005 -23.4375 26.25 C-21.1856855 30.58682792 -19.01431459 33.41927416 -14.4375 35.25 C-10.1348897 35.81427676 -6.59386004 35.72762697 -2.5625 34.0625 C0.6618415 31.31232637 2.26807458 29.1847956 2.91796875 24.9140625 C3.15930204 20.57006328 3.11522726 17.26820976 0.375 13.75 C-3.03858972 10.71569803 -5.38589718 9.513026 -9.875 8.9375 C-15.16132812 9.58217416 -19.05264898 12.23832472 -22.4375 16.25 Z M-36.7734375 39.36328125 C-37.89073242 40.0286792 -39.00802734 40.69407715 -40.15917969 41.37963867 C-40.75484741 41.73561127 -41.35051514 42.09158386 -41.9642334 42.45834351 C-45.06940981 44.3133793 -48.17938914 46.16032842 -51.2890625 48.0078125 C-52.218396 48.56020851 -52.218396 48.56020851 -53.16650391 49.12376404 C-64.89796872 56.09263194 -76.73685175 62.86523327 -88.625 69.5625 C-99.59374341 75.7422289 -110.47191383 82.0698102 -121.33349609 88.43554688 C-124.59954227 90.34472221 -127.87132904 92.24374687 -131.14453125 94.140625 C-132.78723999 95.09400757 -132.78723999 95.09400757 -134.46313477 96.06665039 C-136.56541335 97.28643996 -138.66871852 98.50446248 -140.77319336 99.72045898 C-141.7194458 100.27032471 -142.66569824 100.82019043 -143.640625 101.38671875 C-144.47239258 101.86842529 -145.30416016 102.35013184 -146.16113281 102.84643555 C-150.64894216 105.33880682 -150.64894216 105.33880682 -153.08984375 109.51953125 C-153.18394531 110.35871094 -153.27804688 111.19789063 -153.375 112.0625 C-154.23221698 117.25890382 -155.63156025 119.62529548 -159.4375 123.25 C-161.4175 124.24 -161.4175 124.24 -163.4375 125.25 C-163.4375 172.11 -163.4375 218.97 -163.4375 267.25 C-159.43929067 265.25089534 -158.89279001 264.91543893 -156.9140625 261.3046875 C-156.45749268 260.48693848 -156.00092285 259.66918945 -155.53051758 258.82666016 C-155.04607178 257.9351123 -154.56162598 257.04356445 -154.0625 256.125 C-152.99733132 254.21285175 -151.93087302 252.30142144 -150.86328125 250.390625 C-150.30592285 249.38708984 -149.74856445 248.38355469 -149.17431641 247.34960938 C-146.26322223 242.15432519 -143.25708043 237.01513761 -140.25 231.875 C-139.65920654 230.86284424 -139.06841309 229.85068848 -138.4597168 228.80786133 C-134.77957695 222.51262838 -131.05432418 216.24668565 -127.28320312 210.00561523 C-124.96834363 206.16570426 -122.75716756 202.28282412 -120.609375 198.34765625 C-119.29200634 195.98956635 -117.90189532 193.68379152 -116.5 191.375 C-114.52183389 188.10130949 -112.62647834 184.80479704 -110.8125 181.4375 C-106.31220491 173.10011121 -101.54910466 164.90954289 -96.8359375 156.69140625 C-95.67878097 154.67123074 -94.52502855 152.64923725 -93.375 150.625 C-88.67154116 142.35339997 -83.87626415 134.13693569 -79.07617188 125.92114258 C-70.77114596 111.69735151 -62.52254108 97.43965639 -54.375 83.125 C-49.61439227 74.77305661 -44.75179215 66.48024755 -39.90234375 58.1796875 C-39.34144043 57.21256836 -38.78053711 56.24544922 -38.20263672 55.24902344 C-36.96350288 53.14369562 -35.69696675 51.05437152 -34.41064453 48.97753906 C-33.43587158 47.38377441 -33.43587158 47.38377441 -32.44140625 45.7578125 C-31.84271729 44.79762207 -31.24402832 43.83743164 -30.62719727 42.84814453 C-29.21051667 40.36371992 -29.21051667 40.36371992 -29.74975586 37.90576172 C-30.09018921 37.08615967 -30.09018921 37.08615967 -30.4375 36.25 C-32.60981183 36.25 -35.00753602 38.30846869 -36.7734375 39.36328125 Z M8.5625 36.25 C9.10992526 40.97042113 11.26807542 44.43649028 13.75 48.375 C14.58111683 49.72552408 15.41053966 51.07709209 16.23828125 52.4296875 C16.64127441 53.08678711 17.04426758 53.74388672 17.45947266 54.42089844 C18.85964344 56.74273986 20.15953173 59.10896259 21.4375 61.5 C27.80933413 73.3586913 34.70104737 84.92986608 41.80859375 96.359375 C43.95662597 99.89956174 45.91402755 103.52170722 47.8671875 107.171875 C50.43330398 111.8310911 53.15266698 116.39880675 55.88793945 120.96044922 C58.3577492 125.10146431 60.55047298 129.2679154 62.625 133.625 C64.62498706 137.38134962 65.98405671 138.89135579 70.0625 140.1875 C71.21105469 140.45433594 71.21105469 140.45433594 72.3828125 140.7265625 C76.93049674 141.81865871 79.80929173 144.17040148 82.4375 147.9375 C84.21970488 153.18510324 84.56616536 158.10580583 82.1875 163.1875 C81.40873619 167.00344267 82.13409984 167.63628563 84.1796875 170.83984375 C84.73575684 171.72969971 85.29182617 172.61955566 85.86474609 173.53637695 C86.42500488 174.43187256 86.98526367 175.32736816 87.5625 176.25 C88.47819071 177.8200527 89.38480248 179.39544366 90.28125 180.9765625 C90.73105225 181.76796631 91.18085449 182.55937012 91.64428711 183.37475586 C92.11229736 184.19983643 92.58030762 185.02491699 93.0625 185.875 C100.96197784 199.74557943 108.98851663 213.54282153 117.12890625 227.2734375 C117.70584229 228.24676025 118.28277832 229.22008301 118.87719727 230.22290039 C119.95776007 232.04356183 121.04011893 233.86315921 122.12475586 235.68139648 C125.75479605 241.79250564 129.18247364 247.99774182 132.5625 254.25 C133.77448709 256.46923553 135.00440313 258.67415518 136.25 260.875 C136.81074219 261.87789062 137.37148438 262.88078125 137.94921875 263.9140625 C139.41314209 266.53404996 139.41314209 266.53404996 142.5625 267.25 C142.67921606 248.78738374 142.76743052 230.32484217 142.82156086 211.86193371 C142.84736075 203.28958504 142.88254508 194.71746537 142.93969727 186.14526367 C142.98947795 178.67515597 143.02177803 171.20521408 143.03294247 163.73494512 C143.0394704 159.77809174 143.05484899 155.82171278 143.09115028 151.86501122 C143.12502609 148.14260634 143.1355704 144.42087239 143.12803841 140.69832802 C143.13007524 138.67705364 143.15701442 136.65585277 143.18460083 134.63476562 C143.17772751 133.43583176 143.17085419 132.23689789 143.16377258 131.00163269 C143.16838155 129.95724124 143.17299051 128.91284979 143.17773914 127.83681011 C142.81071664 125.02989062 142.81071664 125.02989062 140.16554546 123.55067921 C139.30654046 123.12145507 138.44753546 122.69223093 137.5625 122.25 C132.51960374 116.50670148 132.51960374 116.50670148 132.62841797 113.31884766 C132.68830216 110.65599713 132.4842197 108.76045966 131.5625 106.25 C128.31199265 103.3419761 124.58041119 101.54730602 120.6875 99.625 C118.66764644 98.57342676 116.64941089 97.51873976 114.6328125 96.4609375 C113.12702637 95.68363281 113.12702637 95.68363281 111.59082031 94.890625 C107.60424521 92.73085519 103.81953354 90.31266861 100.03076172 87.82568359 C96.7258404 85.71589505 93.29496925 83.89198139 89.83984375 82.04296875 C85.56081097 79.70199611 81.34335834 77.26072787 77.125 74.8125 C76.29000977 74.32797363 75.45501953 73.84344727 74.59472656 73.34423828 C70.32783626 70.86487444 66.06817203 68.37357172 61.8125 65.875 C55.16354977 61.98564193 48.43768196 58.23279806 41.72290039 54.45874023 C33.53496276 49.83944355 25.44072869 45.07180943 17.39306641 40.21240234 C16.52472168 39.69242676 15.65637695 39.17245117 14.76171875 38.63671875 C13.99690186 38.17483154 13.23208496 37.71294434 12.4440918 37.23706055 C10.62144679 36.0951507 10.62144679 36.0951507 8.5625 36.25 Z M-8.4375 47.25 C-11.95540949 70.1999905 -15.30673574 93.1712582 -18.50390625 116.16796875 C-18.63700825 117.12492645 -18.77011024 118.08188416 -18.90724564 119.06784058 C-20.26227448 128.81340426 -21.61264325 138.5595984 -22.95456791 148.30697536 C-23.46701285 152.02552763 -23.98175773 155.74375948 -24.49690056 159.46193886 C-24.73803795 161.20694837 -24.97806452 162.95211181 -25.21689034 164.69743919 C-27.4514815 181.02642573 -27.4514815 181.02642573 -29.05006409 188.30567932 C-29.68443257 191.48921425 -29.87190714 194.63492137 -30.0625 197.875 C-30.13726562 199.08414063 -30.21203125 200.29328125 -30.2890625 201.5390625 C-30.33804688 202.43367187 -30.38703125 203.32828125 -30.4375 204.25 C-24.7214749 203.77216194 -20.85469522 201.4642101 -16.0625 198.5625 C-14.35940455 197.55463757 -12.65627808 196.54682754 -10.953125 195.5390625 C-10.05529297 195.00313477 -9.15746094 194.46720703 -8.23242188 193.91503906 C-3.44212487 191.06128071 1.37269556 188.24964832 6.1875 185.4375 C7.18193115 184.85524658 8.1763623 184.27299316 9.20092773 183.6730957 C17.76662698 178.67387568 26.412174 173.82361214 35.10205078 169.04370117 C39.68504402 166.50545711 44.24232885 163.92506237 48.6953125 161.1640625 C49.40961426 160.72529785 50.12391602 160.2865332 50.85986328 159.83447266 C53.63062443 157.25600408 53.88842687 154.26198335 54.24609375 150.6171875 C54.5625 148.25 54.5625 148.25 55.84375 146.390625 C56.90581137 144.03673242 56.90581137 144.03673242 55.09765625 141.0546875 C54.28848034 139.73544606 53.4627073 138.42631093 52.625 137.125 C51.68427073 135.5975394 50.74560234 134.06880834 49.80859375 132.5390625 C49.28894043 131.69891602 48.76928711 130.85876953 48.23388672 129.99316406 C45.12170658 124.88529728 42.16520006 119.68699822 39.1875 114.5 C38.2284375 112.83650513 38.2284375 112.83650513 37.25 111.1394043 C33.6949714 104.97241718 30.16104131 98.79386293 26.64257812 92.60595703 C22.32332011 85.01112272 17.92398357 77.50337371 13.29296875 70.09375 C11.60091461 67.31312829 10.03552789 64.49454293 8.5 61.625 C5.48134886 55.9940546 2.23599375 50.48194564 -1.4375 45.25 C-3.79037614 45.25 -6.23123224 46.49893012 -8.4375 47.25 Z M-22.4375 50.25 C-26.91133481 57.00938086 -30.72589129 64.2452784 -34.6875 71.3125 C-38.48303101 78.05658983 -42.30102626 84.78200174 -46.25 91.4375 C-50.64555005 98.84860183 -54.92215135 106.32599323 -59.1875 113.8125 C-64.87448917 123.79322038 -70.6197437 133.7371043 -76.42211914 143.65136719 C-80.69367792 150.956582 -84.90690006 158.29342913 -89.09716797 165.64550781 C-92.4841775 171.58671163 -95.88854249 177.51750748 -99.3125 183.4375 C-99.95481567 184.54992065 -99.95481567 184.54992065 -100.61010742 185.68481445 C-102.84484995 189.5436406 -105.11173685 193.38029352 -107.4140625 197.19921875 C-110.33191084 202.0487778 -113.14543749 206.95224148 -115.9375 211.875 C-120.36513477 219.65571637 -124.85120747 227.39984137 -129.375 235.125 C-134.21975832 243.41899354 -139.04514094 251.72373769 -143.8125 260.0625 C-144.66122681 261.53082275 -144.66122681 261.53082275 -145.52709961 263.02880859 C-146.04151611 263.93324707 -146.55593262 264.83768555 -147.0859375 265.76953125 C-147.54145996 266.56464111 -147.99698242 267.35975098 -148.46630859 268.17895508 C-149.64978666 270.32145466 -149.64978666 270.32145466 -149.4375 273.25 C-144.51649233 272.66712336 -140.8483521 270.48101282 -136.625 268.0625 C-135.84801758 267.62397705 -135.07103516 267.1854541 -134.27050781 266.73364258 C-121.56271578 259.52982275 -108.96755655 252.12479167 -96.40234375 244.67578125 C-95.43071289 244.09997314 -94.45908203 243.52416504 -93.45800781 242.9309082 C-91.63973047 241.85206991 -89.8225723 240.77134185 -88.00683594 239.68823242 C-80.52333269 235.24282322 -72.91571131 231.0512648 -65.1875 227.046875 C-58.07805859 223.45745356 -58.07805859 223.45745356 -52.95703125 217.625 C-52.21473823 215.03553679 -52.21473823 215.03553679 -51.82421875 212.48046875 C-51.26156092 209.23524026 -49.76470733 207.50876006 -47.4375 205.25 C-46.57125 204.858125 -45.705 204.46625 -44.8125 204.0625 C-41.98039387 201.90115585 -41.99269817 201.2144037 -41.39038086 197.81933594 C-41.22851288 196.91799927 -41.0666449 196.0166626 -40.89987183 195.0880127 C-40.15366401 190.50783039 -39.46083773 185.92373474 -38.81640625 181.328125 C-38.67097885 180.30684509 -38.52555145 179.28556519 -38.37571716 178.2333374 C-37.91450744 174.98925944 -37.45725401 171.74463761 -37 168.5 C-36.69751066 166.37105892 -36.394778 164.2421524 -36.09179688 162.11328125 C-34.39985471 150.2005116 -32.75044134 138.28234558 -31.13208008 126.359375 C-30.20157207 119.50484431 -29.25375927 112.65273795 -28.30209351 105.80111694 C-27.98762737 103.53587435 -27.67412051 101.27050001 -27.3605957 99.00512695 C-26.34102803 91.6519641 -25.30628331 84.30161967 -24.2265625 76.95703125 C-24.0402124 75.68230957 -23.8538623 74.40758789 -23.66186523 73.09423828 C-23.31418326 70.72607974 -22.96239599 68.35851878 -22.60571289 65.99169922 C-21.82754959 60.68430956 -21.23085894 55.61501408 -21.4375 50.25 C-21.7675 50.25 -22.0975 50.25 -22.4375 50.25 Z M49.5 172.9375 C48.81099609 173.34033203 48.12199219 173.74316406 47.41210938 174.15820312 C45.11870958 175.50570291 42.83990789 176.87566163 40.5625 178.25 C38.91807993 179.23586256 37.27354637 180.22153583 35.62890625 181.20703125 C33.08088009 182.736143 30.53407835 184.26716197 27.99023438 185.80322266 C22.24594206 189.26630463 16.45027655 192.61341341 10.59008789 195.87573242 C3.62463352 199.75637251 -3.26578813 203.76437235 -10.16015625 207.76953125 C-13.90932841 209.94736538 -17.67019935 212.10368927 -21.4375 214.25 C-21.4375 215.57 -21.4375 216.89 -21.4375 218.25 C-18.47982775 219.50156812 -15.52123738 220.75095219 -12.5625 222 C-11.32886719 222.52207031 -11.32886719 222.52207031 -10.0703125 223.0546875 C-5.0986949 225.15208867 -0.10850177 227.19265205 4.90527344 229.18701172 C7.8217908 230.35372585 10.72974459 231.54017946 13.63671875 232.73046875 C25.64774754 237.64752894 37.66717438 242.52695136 49.7878418 247.16870117 C54.1694469 248.86047056 58.4635075 250.64312199 62.71875 252.6328125 C67.10225293 254.65694696 71.55193166 256.41103142 76.08203125 258.07421875 C82.0581792 260.27141022 87.95545491 262.6121066 93.82421875 265.08203125 C94.59847198 265.40775116 95.37272522 265.73347107 96.17044067 266.06906128 C99.34316545 267.40706742 102.51378822 268.74997747 105.68334961 270.09545898 C108.04115129 271.09495413 110.40128582 272.08876955 112.76171875 273.08203125 C113.47317551 273.38615433 114.18463226 273.6902774 114.91764832 274.00361633 C120.08685935 276.20148627 120.08685935 276.20148627 125.5625 277.25 C127.89704661 275.41641665 127.89704661 275.41641665 129.5625 273.25 C127.85116098 268.51810086 125.45335887 264.25021866 123 259.875 C122.33726074 258.68668579 122.33726074 258.68668579 121.66113281 257.47436523 C118.15703518 251.22714192 114.50826298 245.07944151 110.765625 238.97265625 C108.46544837 235.15497982 106.36312786 231.23532276 104.24023438 227.31713867 C101.45957391 222.23369318 98.58819173 217.20196676 95.71337891 212.17138672 C94.69328014 210.38512144 93.67665658 208.5969086 92.66015625 206.80859375 C88.69517175 199.85380774 84.6065172 192.99591293 80.36254883 186.20751953 C77.99228681 182.31312727 75.8269422 178.32355314 73.69140625 174.296875 C72.72415139 172.3190897 72.72415139 172.3190897 71.5625 171.25 C69.9843848 171.03958464 68.39914622 170.88143815 66.8125 170.75 C64.11613415 170.52395735 61.75918731 170.31277254 59.17578125 169.48828125 C55.28362872 169.13339141 52.71478679 170.98417109 49.5 172.9375 Z M-30.25 231.1875 C-34.15392076 233.28458755 -36.95458614 233.75749968 -41.4375 233.25 C-42.7059375 232.7240625 -42.7059375 232.7240625 -44 232.1875 C-47.24297333 230.94020256 -49.06798335 231.4631715 -52.4375 232.25 C-55.29326033 233.55884074 -55.29326033 233.55884074 -58.11328125 235.27734375 C-59.17933594 235.89931641 -60.24539062 236.52128906 -61.34375 237.16210938 C-62.4678125 237.83048828 -63.591875 238.49886719 -64.75 239.1875 C-65.9304956 239.88039959 -67.11148997 240.57245007 -68.29296875 241.26367188 C-71.6806622 243.24875363 -75.05936165 245.24870339 -78.4375 247.25 C-79.96181749 248.14785241 -81.4864905 249.04510188 -83.01171875 249.94140625 C-84.96880154 251.09173257 -86.9253776 252.24283475 -88.87963867 253.39794922 C-95.41104193 257.2540758 -101.98817127 261.03017548 -108.5625 264.8125 C-117.91498948 270.19520841 -127.2146482 275.64815842 -136.4375 281.25 C-137.39011719 281.76046875 -138.34273437 282.2709375 -139.32421875 282.796875 C-140.02160156 283.27640625 -140.71898437 283.7559375 -141.4375 284.25 C-141.4375 285.24 -141.4375 286.23 -141.4375 287.25 C-55.9675 287.25 29.5025 287.25 117.5625 287.25 C108.9921559 282.96482795 100.03585704 279.4228447 91.1875 275.75 C90.56593018 275.49001221 89.94436035 275.23002441 89.30395508 274.9621582 C84.56860303 273.00750057 79.78164559 271.20348783 74.98046875 269.41796875 C67.0075541 266.44827399 59.12312704 263.28586772 51.25 260.0625 C49.85311822 259.49269709 48.45614363 258.92312166 47.05908203 258.35375977 C43.5519669 256.92392082 40.0458277 255.4917088 36.5401001 254.05847168 C22.08966246 248.15092262 7.63424917 242.25586111 -6.85247803 236.43777466 C-8.18913329 235.90062374 -9.5254438 235.36261403 -10.86138916 234.82369995 C-12.71775359 234.07520185 -14.57564275 233.33048862 -16.43359375 232.5859375 C-18.02965454 231.94470947 -18.02965454 231.94470947 -19.65795898 231.29052734 C-25.09460554 229.15100321 -25.09460554 229.15100321 -30.25 231.1875 Z M134.5625 282.25 C132.24724396 286.08464282 131.53313076 288.39829197 131.6875 292.875 C132.84570157 297.34234889 134.16156328 300.05508339 137.6875 303.0625 C142.66728187 305.11936643 147.45771813 305.11936643 152.4375 303.0625 C155.98756356 300.03450461 157.29107651 297.31630656 158.4375 292.8125 C158.6164462 287.71253317 156.77808693 285.04906866 154 280.9375 C147.54864325 276.47117609 140.38642263 277.49577745 134.5625 282.25 Z M-174.75 282.25 C-178.04694494 286.1574903 -177.76815332 289.58119469 -177.72265625 294.546875 C-177.33783774 298.19474364 -176.19765463 299.87320018 -173.4375 302.25 C-169.16938751 304.75907868 -165.28431294 304.93880184 -160.4375 304.25 C-156.34199726 302.16501679 -154.1366504 300.49022217 -152.4375 296.25 C-151.69357431 291.50453716 -151.49138384 286.78706263 -154.375 282.75 C-160.76935193 277.53012087 -168.23834261 276.61829631 -174.75 282.25 Z M-142.4375 299.25 C-142.4375 300.24 -142.4375 301.23 -142.4375 302.25 C-141.33801025 302.87491333 -141.33801025 302.87491333 -140.21630859 303.51245117 C-115.52384538 317.55722844 -115.52384538 317.55722844 -103.3125 324.8125 C-92.20402242 331.41192974 -81.01377259 337.86555225 -69.81347656 344.30761719 C-64.06070286 347.61750058 -58.31164717 350.93382285 -52.5625 354.25 C-51.00450684 355.1479126 -51.00450684 355.1479126 -49.41503906 356.06396484 C-48.4144043 356.64098145 -47.41376953 357.21799805 -46.3828125 357.8125 C-45.40860352 358.37324219 -44.43439453 358.93398438 -43.43066406 359.51171875 C-41.33146395 360.73083007 -39.24029876 361.96383257 -37.15527344 363.20703125 C-36.09083008 363.83996094 -35.02638672 364.47289062 -33.9296875 365.125 C-32.97175293 365.69992187 -32.01381836 366.27484375 -31.02685547 366.8671875 C-28.74082171 368.08801488 -27.00703229 368.97813586 -24.4375 369.25 C-22.72474465 367.97641268 -21.06082967 366.63576923 -19.4375 365.25 C-14.99442639 362.78162577 -10.40051493 362.55517791 -5.4375 363.25 C-1.8968765 364.57150032 1.26412835 366.43862206 4.46118164 368.43652344 C5.1546167 368.7049707 5.84805176 368.97341797 6.5625 369.25 C9.83900489 367.49874948 9.83900489 367.49874948 12.12597656 365.88964844 C14.86571998 364.04594936 17.68238741 362.41851468 20.5546875 360.7890625 C21.65828613 360.16056396 22.76188477 359.53206543 23.89892578 358.88452148 C24.47483459 358.55749237 25.05074341 358.23046326 25.644104 357.89352417 C28.75963389 356.12411992 31.87181765 354.34884507 34.984375 352.57421875 C35.61993317 352.21201736 36.25549133 351.84981598 36.91030884 351.47663879 C43.18139043 347.90107642 49.4364011 344.29787539 55.6875 340.6875 C56.74211426 340.07849854 57.79672852 339.46949707 58.88330078 338.84204102 C61.01963395 337.60808794 63.15586431 336.37395687 65.29199219 335.13964844 C70.96448 331.86217339 76.63839264 328.58717018 82.3125 325.3125 C83.40667236 324.68069824 84.50084473 324.04889648 85.62817383 323.39794922 C90.63795063 320.50676153 95.65157448 317.62341472 100.68408203 314.77197266 C103.31773946 313.2775641 105.94122087 311.76600093 108.5625 310.25 C109.16465332 309.90356445 109.76680664 309.55712891 110.38720703 309.20019531 C112.24483458 308.12490281 114.09214297 307.03368968 115.9375 305.9375 C117.01773437 305.30199219 118.09796875 304.66648437 119.2109375 304.01171875 C119.98695313 303.43035156 120.76296875 302.84898437 121.5625 302.25 C121.5625 301.26 121.5625 300.27 121.5625 299.25 C34.4425 299.25 -52.6775 299.25 -142.4375 299.25 Z " fill="#BB504E" transform="translate(260.4375,50.75)"/>
          </g>
          
          {/* Grid and guides */}
          {/* changed gridd from wwhite to dark red color here */}
          <g id="Grid" fill="none" stroke="#8B0000" strokeWidth="2">
            <line x1="990.17" y1="464.52" x2="990.17" y2="1138.95" />
            <line x1="1570.37" y1="464.52" x2="1570.37" y2="1138.95" />
            <line x1="1617.49" y1="511.63" x2="943.05" y2="511.63" />
            <line x1="1617.49" y1="1091.83" x2="943.05" y2="1091.83" />
            <g id="Inner" fill="none" stroke="#8B0000" strokeDasharray="3" clipPath="url(#innerClip)">
              <line x1="1565.88" y1="608.33" x2="993.16" y2="608.33" />
              <line x1="1565.88" y1="705.03" x2="993.16" y2="705.03" />
              <line x1="1565.88" y1="801.73" x2="993.16" y2="801.73" />
              <line x1="1565.88" y1="898.43" x2="993.16" y2="898.43" />
              <line x1="1565.88" y1="995.13" x2="993.16" y2="995.13" />
              <line x1="1473.67" y1="1087.34" x2="1473.67" y2="514.63" />
              <line x1="1376.97" y1="1087.34" x2="1376.97" y2="514.63" />
              <line x1="1280.27" y1="1087.34" x2="1280.27" y2="514.63" />
              <line x1="1183.57" y1="1087.34" x2="1183.57" y2="514.63" />
              <line x1="1086.87" y1="1087.34" x2="1086.87" y2="514.63" />
            </g>
          </g>
          
          {/* Particles group - using type assertion to avoid TypeScript errors */}
          {/* color of the cirlces holding up the grid and the stars from exploding */}
          <g id="Particles" stroke="#8B0000" fill="#8B0000" {...{} as any}>
            <circle cx="990.17" cy="511.63" r="2.62" x0="0" y0="0" start="1.44" />
            <circle cx="1086.87" cy="511.63" r="2.62" x0="4" y0="0" start="0.8" />
            <circle cx="1183.57" cy="511.63" r="2.62" x0="0" y0="0" start="1.76" />
            <circle cx="1280.27" cy="511.63" r="2.62" x0="0" y0="0" start="1.6" />
            <circle cx="1376.97" cy="511.63" r="2.62" x0="0" y0="0" start="1.8" />
            <circle cx="1473.67" cy="511.63" r="2.62" x0="0" y0="0" start="0.28" />
            <circle cx="1570.37" cy="511.63" r="2.62" x0="5" y0="0" start="0.56" />

            <circle cx="990.17" cy="608.33" r="2.62" x0="0" y0="0" start="1" />
            <circle cx="1086.87" cy="608.33" r="2.62" x0="0" y0="0" start="1.32" />
            <circle cx="1183.57" cy="608.33" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1280.27" cy="608.33" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1376.97" cy="608.33" r="2.62" x0="-3" y0="0" start="0" />
            <circle cx="1473.67" cy="608.33" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1570.37" cy="608.33" r="2.62" x0="0" y0="0" start="0" />

            <circle cx="990.17" cy="705.03" r="2.62" x0="0" y0="-2" start="0.5" />
            <circle cx="1086.87" cy="705.03" r="2.62" x0="0" y0="2" start="0.32" />
            <circle cx="1183.57" cy="705.03" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1280.27" cy="705.03" r="2.62" x0="3" y0="0" start="0.6" />
            <circle cx="1376.97" cy="705.03" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1473.67" cy="705.03" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1570.37" cy="705.03" r="2.62" x0="4" y0="0" start="0.9" trail="true" />

            <circle cx="990.17" cy="801.73" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1086.87" cy="801.73" r="2.62" x0="-4" y0="0" start="0.8" trail="true" />
            <circle cx="1183.57" cy="801.73" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1280.27" cy="801.73" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1376.97" cy="801.73" r="2.62" x0="0" y0="3" start="0.76" />
            <circle cx="1473.67" cy="801.73" r="2.62" x0="0" y0="3" start="1.32" />
            <circle cx="1570.37" cy="801.73" r="2.62" x0="0" y0="0" start="0" />

            <circle cx="990.17" cy="898.43" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1086.87" cy="898.43" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1183.57" cy="898.43" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1280.27" cy="898.43" r="2.62" x0="0" y0="3" start="0.6" />
            <circle cx="1376.97" cy="898.43" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1473.67" cy="898.43" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1570.37" cy="898.43" r="2.62" x0="0" y0="0" start="0" />

            <circle cx="990.17" cy="995.13" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1086.87" cy="995.13" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1183.57" cy="995.13" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1280.27" cy="995.13" r="2.62" x0="0" y0="1" start="1.24" />
            <circle cx="1376.97" cy="995.13" r="2.62" x0="4" y0="0" start="0.52" />
            <circle cx="1473.67" cy="995.13" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1570.37" cy="995.13" r="2.62" x0="0" y0="0" start="0" />

            <circle cx="990.17" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1086.87" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1183.57" cy="1091.84" r="2.62" x0="0" y0="4" start="0.9" />
            <circle cx="1280.27" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1376.97" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1473.67" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
            <circle cx="1570.37" cy="1091.84" r="2.62" x0="0" y0="0" start="0" />
          </g>
          
          <g id="ShootingStar">
            <line id="ShootingStarTrail2" x1="1476.29" y1="995.13" x2="1516.79" y2="955.83" fill="none" stroke="#7eced6" strokeWidth="2" strokeDasharray="10" />
            <line id="ShootingStarTrail1" x1="1476.29" y1="995.13" x2="1516.79" y2="955.83" fill="none" stroke="#7eced6" strokeWidth="3" />
            <line x1="1476.29" y1="995.13" x2="1516.79" y2="955.83" fill="none" stroke="#8B0000" strokeWidth="5" />
          </g>
          <path id="Blink" d="M1453,974.13s14.43,10.31,22.16,10.82,24.23-12.37,24.23-12.37-10.82,10.31-10.57,22.55,10.57,26.67,10.57,26.67-13.41-13.4-23.72-13.4-23.72,11.85-23.72,11.85,6.18-12.37,6.7-22.93S1453,974.13,1453,974.13Z" fill="#fff"/>
        </g>
      </svg>
    </div>
  );
};

export default OrionAnimation;